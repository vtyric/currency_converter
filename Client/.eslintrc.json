{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json"
        ],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "plugins": [
        "unused-imports"
      ],
      "rules": {
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "browser",
                "onlyDependOnLibsWithTags": [
                  "common",
                  "browser"
                ]
              },
              {
                "sourceTag": "mobile",
                "onlyDependOnLibsWithTags": [
                  "common",
                  "mobile"
                ]
              },
              {
                "sourceTag": "common",
                "onlyDependOnLibsWithTags": [
                  "common"
                ]
              },
              {
                "sourceTag": "feature",
                "onlyDependOnLibsWithTags": [
                  "feature",
                  "ui",
                  "base"
                ]
              },
              {
                "sourceTag": "ui",
                "onlyDependOnLibsWithTags": [
                  "ui",
                  "base"
                ]
              },
              {
                "sourceTag": "base",
                "onlyDependOnLibsWithTags": [
                  "base"
                ]
              }
            ]
          }
        ],
        "prefer-const": "error",
        "semi": "error",
        "padding-line-between-statements": [
          "error",
          {
            "blankLine": "always",
            "prev": "*",
            "next": "return"
          }
        ],
        "@typescript-eslint/member-ordering": [
          "error",
          {
            // Пока нет getter, setter, abstract-field, abstract-method, но на гите обещают добавить
            "default": [
              "static-field",
              "static-method",
              "public-instance-field",
              "protected-instance-field",
              "private-instance-field",
              "public-constructor",
              "protected-constructor",
              "private-constructor",
              "public-instance-method",
              "protected-instance-method",
              "private-instance-method"
            ]
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": [
              "camelCase"
            ],
            "custom": {
              "regex": "^[^А-ЯЁа-яё]*$",
              "match": true
            }
          },
          {
            "selector": [
              "classProperty",
              "parameterProperty"
            ],
            "format": [
              "camelCase"
            ],
            "modifiers": [
              "private"
            ],
            "prefix": [
              "_"
            ],
            "custom": {
              "regex": "^[^А-ЯЁа-яё]*$",
              "match": true
            }
          },
          {
            "selector": [
              "classProperty"
            ],
            "modifiers": [
              "public",
              "static",
              "readonly"
            ],
            "format": [
              "camelCase",
              "UPPER_CASE"
            ],
            "custom": {
              "regex": "^[^А-ЯЁа-яё]*$",
              "match": true
            }
          },
          {
            "selector": "interface",
            "format": [
              "PascalCase"
            ],
            "custom": {
              "regex": "^I[A-Z][^А-Яа-я]*$",
              "match": true
            }
          },
          {
            "selector": "objectLiteralProperty",
            "format": null,
            "custom": {
              "regex": "^[^А-ЯЁа-яё]*$",
              "match": true
            }
          },
          {
            "selector": "typeLike",
            "format": [
              "PascalCase"
            ],
            "custom": {
              "regex": "^[^А-ЯЁа-яё]*$",
              "match": true
            }
          },
          {
            "selector": [
              "variable"
            ],
            "modifiers": [
              "const",
              "exported"
            ],
            "format": [
              "camelCase",
              "UPPER_CASE"
            ],
            "custom": {
              "regex": "^[^А-ЯЁа-яё]*$",
              "match": true
            }
          }
        ],
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": {
              "constructors": "no-public"
            }
          }
        ],
        "@typescript-eslint/array-type": [
          "error",
          {
            "default": "array-simple"
          }
        ],
        "@typescript-eslint/typedef": [
          "error",
          {
            "arrowParameter": true,
            "variableDeclaration": true,
            "arrayDestructuring": true,
            "parameter": true,
            "propertyDeclaration": true,
            "memberVariableDeclaration": true,
            "objectDestructuring": true,
            "variableDeclarationIgnoreFunction": true
          }
        ],
        "@typescript-eslint/explicit-function-return-type": "error",
        "@angular-eslint/no-conflicting-lifecycle": "error",
        "@angular-eslint/no-host-metadata-property": "error",
        "@angular-eslint/no-input-rename": "error",
        "@angular-eslint/no-inputs-metadata-property": "error",
        "@angular-eslint/no-output-native": "error",
        "@angular-eslint/no-output-on-prefix": "error",
        "@angular-eslint/no-output-rename": "error",
        "@angular-eslint/no-outputs-metadata-property": "error",
        "@angular-eslint/use-lifecycle-interface": "error",
        "@angular-eslint/use-pipe-transform-interface": "error",
        "jsdoc/require-jsdoc": [
          "error",
          {
            "contexts": [
              "MethodDefinition:not([key.name=\"constructor\"]):not([key.name=\"ngOnInit\"]):not([key.name=\"ngOnDestroy\"]):not([key.name=\"ngOnChanges\"]):not([key.name=\"ngDoCheck\"]):not([key.name=\"ngAfterContentInit\"]):not([key.name=\"ngAfterContentChecked\"]):not([key.name=\"ngAfterViewInit\"]):not([key.name=\"ngAfterViewChecked\"])"
            ],
            "require": {
              "ArrowFunctionExpression": false,
              "ClassDeclaration": false,
              "ClassExpression": false,
              "FunctionDeclaration": true,
              "FunctionExpression": true
            }
          }
        ],
        "valid-jsdoc": [
          "error",
          {
            "requireParamDescription": false,
            "requireReturnDescription": false,
            "requireReturnType": false,
            "requireParamType": false,
            "requireReturn": false,
            "matchDescription": "\\S"
          }
        ],
        "max-classes-per-file": [
          "error",
          1
        ],
        "curly": "error",
        "eqeqeq": [
          "error",
          "always"
        ],
        "indent": [
          "error",
          4,
          {
            "SwitchCase": 1
          }
        ],
        "quotes": [
          "error",
          "single",
          {
            "allowTemplateLiterals": true
          }
        ],
        "object-curly-spacing": [
          "error",
          "always"
        ],
        "unused-imports/no-unused-imports": "warn"
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {}
    }
  ]
}
